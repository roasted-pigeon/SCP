-- MySQL Script generated by MySQL Workbench
-- Sun Jun 18 21:24:23 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema gameDB
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `gameDB` ;

-- -----------------------------------------------------
-- Schema gameDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `gameDB` ;
USE `gameDB` ;

-- -----------------------------------------------------
-- Table `gameDB`.`accessCard`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`accessCard` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`accessCard` (
  `card_id` VARCHAR(256) NOT NULL,
  `status_id` INT NOT NULL,
  `datetime` DATETIME NOT NULL DEFAULT datetime('now', 'localtime'),
  `expire` DATETIME NOT NULL DEFAULT datetime('now', '+1 year', 'localtime'),
  `user_id` INT NOT NULL,
  `user_employeeClass_id` INT NOT NULL,
  PRIMARY KEY (`card_id`),
  INDEX `accessCard_status` (`status_id` ASC) VISIBLE,
  INDEX `accessCard_user` (`user_id` ASC, `user_employeeClass_id` ASC) VISIBLE,
  CONSTRAINT `accessCard_status`
    FOREIGN KEY (`status_id`)
    REFERENCES `gameDB`.`accessStatus` (`id`),
  CONSTRAINT `accessCard_user`
    FOREIGN KEY (`user_id` , `user_employeeClass_id`)
    REFERENCES `gameDB`.`user` (`id` , `employeeClass_id`))
COMMENT = 'This table stores records of all cards (passes)';


-- -----------------------------------------------------
-- Table `gameDB`.`accessStatus`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`accessStatus` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`accessStatus` (
  `id` INT NOT NULL,
  `name` CHAR(256) NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`id`))
COMMENT = 'This table stores records of possible access statuses';


-- -----------------------------------------------------
-- Table `gameDB`.`clearance`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`clearance` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`clearance` (
  `id` INT NOT NULL,
  `name` VARCHAR(50) NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`id`))
COMMENT = 'This table stores records of possible clearance levels';


-- -----------------------------------------------------
-- Table `gameDB`.`containmentClass`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`containmentClass` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`containmentClass` (
  `id` INT NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`id`))
COMMENT = 'This table stores records of possible containment classes';


-- -----------------------------------------------------
-- Table `gameDB`.`department`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`department` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`department` (
  `id` INT NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`id`))
COMMENT = 'This table stores records of all departments of the Foundation';


-- -----------------------------------------------------
-- Table `gameDB`.`disruptionClass`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`disruptionClass` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`disruptionClass` (
  `id` INT NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`id`))
COMMENT = 'This table stores records of possible disruption classes';


-- -----------------------------------------------------
-- Table `gameDB`.`docType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`docType` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`docType` (
  `id` INT NOT NULL,
  `name` INT NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`id`))
COMMENT = 'This table stores records of possible document types';


-- -----------------------------------------------------
-- Table `gameDB`.`employeeClass`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`employeeClass` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`employeeClass` (
  `id` INT NOT NULL,
  `letter` VARCHAR(1) NOT NULL,
  `description` TEXT NOT NULL,
  UNIQUE INDEX `letter` (`letter` ASC) VISIBLE,
  PRIMARY KEY (`id`))
COMMENT = 'This table stores records of possible staff classes';


-- -----------------------------------------------------
-- Table `gameDB`.`facility`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`facility` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`facility` (
  `id` INT NOT NULL,
  `width` DOUBLE NOT NULL,
  `length` DOUBLE NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `description` TEXT NOT NULL,
  `facilityType_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `facility_facilityType` (`facilityType_id` ASC) VISIBLE,
  CONSTRAINT `facility_facilityType`
    FOREIGN KEY (`facilityType_id`)
    REFERENCES `gameDB`.`facilityType` (`id`))
COMMENT = 'This table stores records of all the Foundation\'\'s facilities';


-- -----------------------------------------------------
-- Table `gameDB`.`facilitySection`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`facilitySection` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`facilitySection` (
  `id` INT NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `description` TEXT NOT NULL,
  `sectionType_id` INT NOT NULL,
  `safetyRequirements` TEXT NOT NULL,
  `facility_id` INT NOT NULL,
  `clearance_id` INT NOT NULL,
  `sectionStatus_id` INT NOT NULL,
  `specialAccessRequired` TINYINT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `facilitySection_SectionType` (`sectionType_id` ASC) VISIBLE,
  INDEX `facilitySection_clearance` (`clearance_id` ASC) VISIBLE,
  INDEX `facilitySection_facility` (`facility_id` ASC) VISIBLE,
  INDEX `facilitySection_roomStatus` (`sectionStatus_id` ASC) VISIBLE,
  CONSTRAINT `facilitySection_SectionType`
    FOREIGN KEY (`sectionType_id`)
    REFERENCES `gameDB`.`sectionType` (`id`),
  CONSTRAINT `facilitySection_clearance`
    FOREIGN KEY (`clearance_id`)
    REFERENCES `gameDB`.`clearance` (`id`),
  CONSTRAINT `facilitySection_facility`
    FOREIGN KEY (`facility_id`)
    REFERENCES `gameDB`.`facility` (`id`),
  CONSTRAINT `facilitySection_roomStatus`
    FOREIGN KEY (`sectionStatus_id`)
    REFERENCES `gameDB`.`roomStatus` (`id`))
COMMENT = 'This table stores records of all sections within the facilities';


-- -----------------------------------------------------
-- Table `gameDB`.`facilityType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`facilityType` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`facilityType` (
  `id` INT NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`id`))
COMMENT = 'This table stores records of possible facility types';


-- -----------------------------------------------------
-- Table `gameDB`.`fileAccess`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`fileAccess` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`fileAccess` (
  `fileType_id` INT NOT NULL,
  `fileAccessType_id` INT NOT NULL,
  `fileRequester_fileRequesterType_id` INT NOT NULL,
  `fileRequester_fileRequester_id` VARCHAR(256) NOT NULL,
  PRIMARY KEY (`fileType_id`, `fileAccessType_id`, `fileRequester_fileRequesterType_id`, `fileRequester_fileRequester_id`),
  INDEX `fileAccess_fileAccessType` (`fileAccessType_id` ASC) VISIBLE,
  INDEX `fileAccess_fileRequester` (`fileRequester_fileRequesterType_id` ASC, `fileRequester_fileRequester_id` ASC) VISIBLE,
  CONSTRAINT `fileAccess_fileAccessType`
    FOREIGN KEY (`fileAccessType_id`)
    REFERENCES `gameDB`.`fileAccessType` (`id`),
  CONSTRAINT `fileAccess_fileRequester`
    FOREIGN KEY (`fileRequester_fileRequesterType_id` , `fileRequester_fileRequester_id`)
    REFERENCES `gameDB`.`fileRequester` (`fileRequesterType_id` , `fileRequester_id`),
  CONSTRAINT `fileAccess_fileType`
    FOREIGN KEY (`fileType_id`)
    REFERENCES `gameDB`.`fileType` (`id`))
COMMENT = 'This table stores records of all file permissions';


-- -----------------------------------------------------
-- Table `gameDB`.`fileAccessType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`fileAccessType` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`fileAccessType` (
  `id` INT NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`id`))
COMMENT = 'This table stores records of possible file access types';


-- -----------------------------------------------------
-- Table `gameDB`.`fileRequester`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`fileRequester` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`fileRequester` (
  `fileRequesterType_id` INT NOT NULL,
  `fileRequester_id` VARCHAR(256) NOT NULL,
  PRIMARY KEY (`fileRequesterType_id`, `fileRequester_id`),
  CONSTRAINT `fileRequester_fileRequesterType`
    FOREIGN KEY (`fileRequesterType_id`)
    REFERENCES `gameDB`.`fileRequesterType` (`id`));


-- -----------------------------------------------------
-- Table `gameDB`.`fileRequesterType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`fileRequesterType` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`fileRequesterType` (
  `id` INT NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`id`))
COMMENT = 'This table stores records of possible types of user-to-file relationships';


-- -----------------------------------------------------
-- Table `gameDB`.`fileType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`fileType` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`fileType` (
  `id` INT NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`id`))
COMMENT = 'This table stores records of possible file types';


-- -----------------------------------------------------
-- Table `gameDB`.`job`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`job` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`job` (
  `id` INT NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `description` TEXT NOT NULL,
  `department_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `job_department` (`department_id` ASC) VISIBLE,
  CONSTRAINT `job_department`
    FOREIGN KEY (`department_id`)
    REFERENCES `gameDB`.`department` (`id`))
COMMENT = 'This table stores records of all positions in all departments of the Foundation';


-- -----------------------------------------------------
-- Table `gameDB`.`loginData`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`loginData` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`loginData` (
  `login` VARCHAR(40) NOT NULL,
  `password` VARCHAR(256) NOT NULL,
  `status_id` INT NOT NULL,
  `expire` DATETIME NOT NULL DEFAULT datetime('now', '+1 month', 'localtime'),
  `user_id` INT NOT NULL,
  `user_employeeClass_id` INT NOT NULL,
  UNIQUE INDEX `loginData_ak_1` (`login` ASC) VISIBLE,
  PRIMARY KEY (`user_employeeClass_id`, `user_id`),
  INDEX `loginData_status` (`status_id` ASC) VISIBLE,
  INDEX `loginData_user` (`user_id` ASC, `user_employeeClass_id` ASC) VISIBLE,
  CONSTRAINT `loginData_status`
    FOREIGN KEY (`status_id`)
    REFERENCES `gameDB`.`accessStatus` (`id`),
  CONSTRAINT `loginData_user`
    FOREIGN KEY (`user_id` , `user_employeeClass_id`)
    REFERENCES `gameDB`.`user` (`id` , `employeeClass_id`))
COMMENT = 'This table stores records of all employee credentials';


-- -----------------------------------------------------
-- Table `gameDB`.`object`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`object` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`object` (
  `id` INT NOT NULL,
  `nickname` VARCHAR(100) NOT NULL,
  `clearance_id` INT NOT NULL,
  `containmentClass_id` INT NOT NULL,
  `disruptionClass_id` INT NULL DEFAULT NULL,
  `riskClass_id` INT NULL DEFAULT NULL,
  `secondaryClass_id` INT NULL DEFAULT NULL,
  `facility_id` INT NULL DEFAULT NULL,
  `specialAccessRequired` TINYINT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `object_clearance` (`clearance_id` ASC) VISIBLE,
  INDEX `object_containmentClass` (`containmentClass_id` ASC) VISIBLE,
  INDEX `object_disruptionClass` (`disruptionClass_id` ASC) VISIBLE,
  INDEX `object_facility` (`facility_id` ASC) VISIBLE,
  INDEX `object_riskClass` (`riskClass_id` ASC) VISIBLE,
  INDEX `object_secondaryClass` (`secondaryClass_id` ASC) VISIBLE,
  CONSTRAINT `object_clearance`
    FOREIGN KEY (`clearance_id`)
    REFERENCES `gameDB`.`clearance` (`id`),
  CONSTRAINT `object_containmentClass`
    FOREIGN KEY (`containmentClass_id`)
    REFERENCES `gameDB`.`containmentClass` (`id`),
  CONSTRAINT `object_disruptionClass`
    FOREIGN KEY (`disruptionClass_id`)
    REFERENCES `gameDB`.`disruptionClass` (`id`),
  CONSTRAINT `object_facility`
    FOREIGN KEY (`facility_id`)
    REFERENCES `gameDB`.`facility` (`id`),
  CONSTRAINT `object_riskClass`
    FOREIGN KEY (`riskClass_id`)
    REFERENCES `gameDB`.`riskClass` (`id`),
  CONSTRAINT `object_secondaryClass`
    FOREIGN KEY (`secondaryClass_id`)
    REFERENCES `gameDB`.`secondaryClass` (`id`))
COMMENT = 'This table stores records of all objects contained by the Foundation';


-- -----------------------------------------------------
-- Table `gameDB`.`objectFile`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`objectFile` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`objectFile` (
  `id` INT NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `docLink` VARCHAR(200) NOT NULL,
  `createdDateTime` DATETIME NOT NULL DEFAULT datetime('now'),
  `object_id` INT NOT NULL,
  `clearance_id` INT NULL DEFAULT NULL,
  `docType_id` INT NOT NULL,
  `specialAccessRequired` TINYINT NOT NULL,
  `user_id` INT NOT NULL,
  `user_employeeClass_id` INT NOT NULL,
  PRIMARY KEY (`docLink`, `id`),
  INDEX `objectFile_clearance` (`clearance_id` ASC) VISIBLE,
  INDEX `objectFile_docType` (`docType_id` ASC) VISIBLE,
  INDEX `objectFile_object` (`object_id` ASC) VISIBLE,
  INDEX `objectFile_user` (`user_id` ASC, `user_employeeClass_id` ASC) VISIBLE,
  CONSTRAINT `objectFile_clearance`
    FOREIGN KEY (`clearance_id`)
    REFERENCES `gameDB`.`clearance` (`id`),
  CONSTRAINT `objectFile_docType`
    FOREIGN KEY (`docType_id`)
    REFERENCES `gameDB`.`docType` (`id`),
  CONSTRAINT `objectFile_object`
    FOREIGN KEY (`object_id`)
    REFERENCES `gameDB`.`object` (`id`),
  CONSTRAINT `objectFile_user`
    FOREIGN KEY (`user_id` , `user_employeeClass_id`)
    REFERENCES `gameDB`.`user` (`id` , `employeeClass_id`))
COMMENT = 'This table stores records of all files directly related to objects';


-- -----------------------------------------------------
-- Table `gameDB`.`riskClass`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`riskClass` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`riskClass` (
  `id` INT NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`id`))
COMMENT = 'This table stores records of possible risk classes';


-- -----------------------------------------------------
-- Table `gameDB`.`room`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`room` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`room` (
  `id` INT NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `description` TEXT NOT NULL,
  `clearance_id` INT NOT NULL,
  `roomStatus_id` INT NOT NULL,
  `roomType_id` INT NOT NULL,
  `parentRoom_id` INT NULL DEFAULT NULL,
  `facilitySection_id` INT NOT NULL,
  `specialAccessRequired` TINYINT NOT NULL,
  `plan_id` INT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `Room_clearance` (`clearance_id` ASC) VISIBLE,
  INDEX `room_facilitySection` (`facilitySection_id` ASC) VISIBLE,
  INDEX `room_room` (`parentRoom_id` ASC) VISIBLE,
  INDEX `room_roomStatus` (`roomStatus_id` ASC) VISIBLE,
  INDEX `room_roomType` (`roomType_id` ASC) VISIBLE,
  INDEX `room_userFile` (`plan_id` ASC) VISIBLE,
  CONSTRAINT `Room_clearance`
    FOREIGN KEY (`clearance_id`)
    REFERENCES `gameDB`.`clearance` (`id`),
  CONSTRAINT `room_facilitySection`
    FOREIGN KEY (`facilitySection_id`)
    REFERENCES `gameDB`.`facilitySection` (`id`),
  CONSTRAINT `room_room`
    FOREIGN KEY (`parentRoom_id`)
    REFERENCES `gameDB`.`room` (`id`),
  CONSTRAINT `room_roomStatus`
    FOREIGN KEY (`roomStatus_id`)
    REFERENCES `gameDB`.`roomStatus` (`id`),
  CONSTRAINT `room_roomType`
    FOREIGN KEY (`roomType_id`)
    REFERENCES `gameDB`.`roomType` (`id`),
  CONSTRAINT `room_userFile`
    FOREIGN KEY (`plan_id`)
    REFERENCES `gameDB`.`userFile` (`id`))
COMMENT = 'This table stores records of all rooms in all sections of all facilities of the Foundation';


-- -----------------------------------------------------
-- Table `gameDB`.`roomStatus`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`roomStatus` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`roomStatus` (
  `id` INT NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`id`))
COMMENT = 'This table stores records of possible room statuses';


-- -----------------------------------------------------
-- Table `gameDB`.`roomType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`roomType` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`roomType` (
  `id` INT NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`id`))
COMMENT = 'This table stores records of possible room types';


-- -----------------------------------------------------
-- Table `gameDB`.`secondaryClass`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`secondaryClass` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`secondaryClass` (
  `id` INT NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`id`))
COMMENT = 'This table stores records of possible secondary classes';


-- -----------------------------------------------------
-- Table `gameDB`.`sectionType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`sectionType` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`sectionType` (
  `id` INT NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`id`))
COMMENT = 'This table stores records of possible section types';


-- -----------------------------------------------------
-- Table `gameDB`.`session`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`session` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`session` (
  `id` VARCHAR(256) NOT NULL,
  `accessStatus_id` INT NOT NULL,
  `datetime` DATETIME NOT NULL DEFAULT datetime('now', 'localtime'),
  `expire` DATETIME NOT NULL DEFAULT datetime('now', '+2 hour', 'localtime'),
  `loginData_user_employeeClass_id` INT NOT NULL,
  `loginData_user_id` INT NOT NULL,
  `system_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `session_accessStatus` (`accessStatus_id` ASC) VISIBLE,
  INDEX `session_loginData` (`loginData_user_employeeClass_id` ASC, `loginData_user_id` ASC) VISIBLE,
  INDEX `session_system` (`system_id` ASC) VISIBLE,
  CONSTRAINT `session_accessStatus`
    FOREIGN KEY (`accessStatus_id`)
    REFERENCES `gameDB`.`accessStatus` (`id`),
  CONSTRAINT `session_loginData`
    FOREIGN KEY (`loginData_user_employeeClass_id` , `loginData_user_id`)
    REFERENCES `gameDB`.`loginData` (`user_employeeClass_id` , `user_id`),
  CONSTRAINT `session_system`
    FOREIGN KEY (`system_id`)
    REFERENCES `gameDB`.`system` (`id`))
COMMENT = 'This table stores records of all authorization sessions of the Foundation\'\'s employees';


-- -----------------------------------------------------
-- Table `gameDB`.`system`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`system` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`system` (
  `id` INT NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `purpose` TEXT NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  `clearance_id` INT NOT NULL,
  `documentation_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `system_userFile` (`documentation_id` ASC) VISIBLE,
  INDEX `systems_clearance` (`clearance_id` ASC) VISIBLE,
  CONSTRAINT `system_userFile`
    FOREIGN KEY (`documentation_id`)
    REFERENCES `gameDB`.`userFile` (`id`),
  CONSTRAINT `systems_clearance`
    FOREIGN KEY (`clearance_id`)
    REFERENCES `gameDB`.`clearance` (`id`))
COMMENT = 'This table stores records of all internal information systems of the Foundation';


-- -----------------------------------------------------
-- Table `gameDB`.`systemAccess`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`systemAccess` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`systemAccess` (
  `systems_id` INT NOT NULL,
  `systemAccessRole_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `user_employeeClass_id` INT NOT NULL,
  PRIMARY KEY (`systems_id`, `user_employeeClass_id`, `user_id`, `systemAccessRole_id`),
  INDEX `systemAccess_systemAccessRole` (`systemAccessRole_id` ASC) VISIBLE,
  INDEX `systemAccess_user` (`user_id` ASC, `user_employeeClass_id` ASC) VISIBLE,
  CONSTRAINT `systemAccess_systemAccessRole`
    FOREIGN KEY (`systemAccessRole_id`)
    REFERENCES `gameDB`.`systemAccessRole` (`id`),
  CONSTRAINT `systemAccess_systems`
    FOREIGN KEY (`systems_id`)
    REFERENCES `gameDB`.`system` (`id`),
  CONSTRAINT `systemAccess_user`
    FOREIGN KEY (`user_id` , `user_employeeClass_id`)
    REFERENCES `gameDB`.`user` (`id` , `employeeClass_id`))
COMMENT = 'This table stores records of all `system` permissions';


-- -----------------------------------------------------
-- Table `gameDB`.`systemAccessRole`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`systemAccessRole` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`systemAccessRole` (
  `id` INT NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`id`))
COMMENT = 'This table stores records about possible user roles in the `system` (for example: user or administrator)';


-- -----------------------------------------------------
-- Table `gameDB`.`unit`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`unit` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`unit` (
  `id` INT NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`id`))
COMMENT = 'This table stores records of possible divisions, groups, units, etc. in which the employees of the Foundation are members';


-- -----------------------------------------------------
-- Table `gameDB`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`user` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`user` (
  `id` INT NOT NULL,
  `gender` TINYINT NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `surname` VARCHAR(100) NOT NULL,
  `dateOfBirth` DATE NOT NULL,
  `rotationDate` DATE NULL DEFAULT NULL,
  `photoLink` VARCHAR(200) NULL DEFAULT NULL,
  `clearance_id` INT NOT NULL,
  `job_id` INT NOT NULL,
  `facility_id` INT NOT NULL,
  `employeeClass_id` INT NOT NULL,
  `decree_id` INT NULL DEFAULT NULL,
  `supervisor_id` INT NULL DEFAULT NULL,
  `supervisor_employeeClass_id` INT NULL DEFAULT NULL,
  PRIMARY KEY (`id`, `employeeClass_id`),
  INDEX `user_clearance` (`clearance_id` ASC) VISIBLE,
  INDEX `user_employeeClass` (`employeeClass_id` ASC) VISIBLE,
  INDEX `user_facility` (`facility_id` ASC) VISIBLE,
  INDEX `user_job` (`job_id` ASC) VISIBLE,
  INDEX `user_user` (`supervisor_id` ASC, `supervisor_employeeClass_id` ASC) VISIBLE,
  INDEX `user_userFile` (`decree_id` ASC) VISIBLE,
  CONSTRAINT `user_clearance`
    FOREIGN KEY (`clearance_id`)
    REFERENCES `gameDB`.`clearance` (`id`),
  CONSTRAINT `user_employeeClass`
    FOREIGN KEY (`employeeClass_id`)
    REFERENCES `gameDB`.`employeeClass` (`id`),
  CONSTRAINT `user_facility`
    FOREIGN KEY (`facility_id`)
    REFERENCES `gameDB`.`facility` (`id`),
  CONSTRAINT `user_job`
    FOREIGN KEY (`job_id`)
    REFERENCES `gameDB`.`job` (`id`),
  CONSTRAINT `user_user`
    FOREIGN KEY (`supervisor_id` , `supervisor_employeeClass_id`)
    REFERENCES `gameDB`.`user` (`id` , `employeeClass_id`),
  CONSTRAINT `user_userFile`
    FOREIGN KEY (`decree_id`)
    REFERENCES `gameDB`.`userFile` (`id`))
COMMENT = 'This table stores records of all the Foundation\'\'s staff';


-- -----------------------------------------------------
-- Table `gameDB`.`userFile`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`userFile` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`userFile` (
  `id` INT NOT NULL,
  `name` INT NOT NULL,
  `clearance_id` INT NOT NULL,
  `createdDateTime` DATETIME NOT NULL DEFAULT datetime('now'),
  `docLink` INT NOT NULL,
  `fileType_id` INT NOT NULL,
  `creator_id` INT NOT NULL,
  `creator_employeeClass_id` INT NOT NULL,
  `associated_with_id` INT NULL DEFAULT NULL,
  `associated_with_employeeClass_id` INT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `userFile_clearance` (`clearance_id` ASC) VISIBLE,
  INDEX `userFile_fileType` (`fileType_id` ASC) VISIBLE,
  INDEX `userFile_user_associated` (`associated_with_id` ASC, `associated_with_employeeClass_id` ASC) VISIBLE,
  INDEX `userFile_user_creator` (`creator_id` ASC, `creator_employeeClass_id` ASC) VISIBLE,
  CONSTRAINT `userFile_clearance`
    FOREIGN KEY (`clearance_id`)
    REFERENCES `gameDB`.`clearance` (`id`),
  CONSTRAINT `userFile_fileType`
    FOREIGN KEY (`fileType_id`)
    REFERENCES `gameDB`.`fileType` (`id`),
  CONSTRAINT `userFile_user_associated`
    FOREIGN KEY (`associated_with_id` , `associated_with_employeeClass_id`)
    REFERENCES `gameDB`.`user` (`id` , `employeeClass_id`),
  CONSTRAINT `userFile_user_creator`
    FOREIGN KEY (`creator_id` , `creator_employeeClass_id`)
    REFERENCES `gameDB`.`user` (`id` , `employeeClass_id`))
COMMENT = 'This table stores records of all user files of the Foundation';


-- -----------------------------------------------------
-- Table `gameDB`.`userFileSpecialAccess`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`userFileSpecialAccess` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`userFileSpecialAccess` (
  `userFile_id` INT NOT NULL,
  `createdDateTime` DATETIME NOT NULL DEFAULT datetime('now'),
  `expiryDateTime` DATETIME NOT NULL DEFAULT datetime('now', '+1 year'),
  `decree_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `user_employeeClass_id` INT NOT NULL,
  PRIMARY KEY (`userFile_id`, `user_id`, `user_employeeClass_id`),
  INDEX `userFileSpecialAccess_user` (`user_id` ASC, `user_employeeClass_id` ASC) VISIBLE,
  INDEX `userFileSpecialAccess_userFile_decree` (`decree_id` ASC) VISIBLE,
  CONSTRAINT `userFileSpecialAccess_user`
    FOREIGN KEY (`user_id` , `user_employeeClass_id`)
    REFERENCES `gameDB`.`user` (`id` , `employeeClass_id`),
  CONSTRAINT `userFileSpecialAccess_userFile`
    FOREIGN KEY (`userFile_id`)
    REFERENCES `gameDB`.`userFile` (`id`),
  CONSTRAINT `userFileSpecialAccess_userFile_decree`
    FOREIGN KEY (`decree_id`)
    REFERENCES `gameDB`.`userFile` (`id`))
COMMENT = 'This table stores records of all special access permissions of employees to files';


-- -----------------------------------------------------
-- Table `gameDB`.`userObjectSpecialAccess`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`userObjectSpecialAccess` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`userObjectSpecialAccess` (
  `object_id` INT NOT NULL,
  `clearance_id` INT NOT NULL,
  `createdDateTime` DATETIME NOT NULL DEFAULT datetime('now'),
  `expiryDateTime` DATETIME NOT NULL DEFAULT datetime('now', '+1 year'),
  `decree_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `user_employeeClass_id` INT NOT NULL,
  PRIMARY KEY (`clearance_id`, `object_id`, `user_id`, `user_employeeClass_id`),
  INDEX `addClearToUser_object` (`object_id` ASC) VISIBLE,
  INDEX `userObjectAdditionalAccess_userFile` (`decree_id` ASC) VISIBLE,
  INDEX `userObjectSpecialAccess_user` (`user_id` ASC, `user_employeeClass_id` ASC) VISIBLE,
  CONSTRAINT `addClearToUser_clearance`
    FOREIGN KEY (`clearance_id`)
    REFERENCES `gameDB`.`clearance` (`id`),
  CONSTRAINT `addClearToUser_object`
    FOREIGN KEY (`object_id`)
    REFERENCES `gameDB`.`object` (`id`),
  CONSTRAINT `userObjectAdditionalAccess_userFile`
    FOREIGN KEY (`decree_id`)
    REFERENCES `gameDB`.`userFile` (`id`),
  CONSTRAINT `userObjectSpecialAccess_user`
    FOREIGN KEY (`user_id` , `user_employeeClass_id`)
    REFERENCES `gameDB`.`user` (`id` , `employeeClass_id`))
COMMENT = 'This table stores records of all special access permissions of employees to objects';


-- -----------------------------------------------------
-- Table `gameDB`.`userRoomSpecialAccess`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`userRoomSpecialAccess` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`userRoomSpecialAccess` (
  `room_id` INT NOT NULL,
  `createdDateTime` DATETIME NOT NULL DEFAULT datetime('now'),
  `expiryDateTime` DATETIME NOT NULL DEFAULT datetime('now', '+1 year'),
  `decree_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `user_employeeClass_id` INT NOT NULL,
  PRIMARY KEY (`room_id`, `user_employeeClass_id`, `user_id`),
  INDEX `userRoomAdditionalAccess_userFile` (`decree_id` ASC) VISIBLE,
  INDEX `userRoomSpecialAccess_user` (`user_id` ASC, `user_employeeClass_id` ASC) VISIBLE,
  CONSTRAINT `userRoomAdditionalAccess_Room`
    FOREIGN KEY (`room_id`)
    REFERENCES `gameDB`.`room` (`id`),
  CONSTRAINT `userRoomAdditionalAccess_userFile`
    FOREIGN KEY (`decree_id`)
    REFERENCES `gameDB`.`userFile` (`id`),
  CONSTRAINT `userRoomSpecialAccess_user`
    FOREIGN KEY (`user_id` , `user_employeeClass_id`)
    REFERENCES `gameDB`.`user` (`id` , `employeeClass_id`))
COMMENT = 'This table stores records of all special access permissions of employees to rooms';


-- -----------------------------------------------------
-- Table `gameDB`.`userSectionSpecialAccess`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`userSectionSpecialAccess` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`userSectionSpecialAccess` (
  `facilitySection_id` INT NOT NULL,
  `createdDateTime` DATETIME NOT NULL DEFAULT datetime('now'),
  `expiryDateTime` DATETIME NOT NULL DEFAULT datetime('now', '+1 year'),
  `decree_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `user_employeeClass_id` INT NOT NULL,
  PRIMARY KEY (`facilitySection_id`, `user_id`, `user_employeeClass_id`),
  INDEX `userSectionSpecialAccess_user` (`user_id` ASC, `user_employeeClass_id` ASC) VISIBLE,
  INDEX `userSectionSpecialAccess_userFile` (`decree_id` ASC) VISIBLE,
  CONSTRAINT `userSectionSpecialAccess_facilitySection`
    FOREIGN KEY (`facilitySection_id`)
    REFERENCES `gameDB`.`facilitySection` (`id`),
  CONSTRAINT `userSectionSpecialAccess_user`
    FOREIGN KEY (`user_id` , `user_employeeClass_id`)
    REFERENCES `gameDB`.`user` (`id` , `employeeClass_id`),
  CONSTRAINT `userSectionSpecialAccess_userFile`
    FOREIGN KEY (`decree_id`)
    REFERENCES `gameDB`.`userFile` (`id`))
COMMENT = 'This table stores records of all special access permissions of employees to rooms';


-- -----------------------------------------------------
-- Table `gameDB`.`userToObject`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`userToObject` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`userToObject` (
  `object_id` INT NOT NULL,
  `userToObjectRole_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `user_employeeClass_id` INT NOT NULL,
  PRIMARY KEY (`object_id`, `user_id`, `user_employeeClass_id`),
  INDEX `userToObject_user` (`user_id` ASC, `user_employeeClass_id` ASC) VISIBLE,
  INDEX `userToObject_userToObjectStatus` (`userToObjectRole_id` ASC) VISIBLE,
  CONSTRAINT `userToObject_object`
    FOREIGN KEY (`object_id`)
    REFERENCES `gameDB`.`object` (`id`),
  CONSTRAINT `userToObject_user`
    FOREIGN KEY (`user_id` , `user_employeeClass_id`)
    REFERENCES `gameDB`.`user` (`id` , `employeeClass_id`),
  CONSTRAINT `userToObject_userToObjectStatus`
    FOREIGN KEY (`userToObjectRole_id`)
    REFERENCES `gameDB`.`userToObjectRole` (`id`))
COMMENT = 'This table stores records of all user-to-object relationships';


-- -----------------------------------------------------
-- Table `gameDB`.`userToObjectRole`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`userToObjectRole` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`userToObjectRole` (
  `id` INT NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  `description` TEXT NOT NULL,
  PRIMARY KEY (`id`))
COMMENT = 'This table stores records about possible employees roles in relation to the objects (for example: researcher or curator)';


-- -----------------------------------------------------
-- Table `gameDB`.`userToUnit`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `gameDB`.`userToUnit` ;

CREATE TABLE IF NOT EXISTS `gameDB`.`userToUnit` (
  `unit_id` INT NOT NULL,
  `position` VARCHAR(256) NOT NULL,
  `description` TEXT NULL DEFAULT NULL,
  `user_id` INT NOT NULL,
  `user_employeeClass_id` INT NOT NULL,
  PRIMARY KEY (`unit_id`, `user_employeeClass_id`, `user_id`),
  INDEX `userToUnit_user` (`user_id` ASC, `user_employeeClass_id` ASC) VISIBLE,
  CONSTRAINT `userToUnit_unit`
    FOREIGN KEY (`unit_id`)
    REFERENCES `gameDB`.`unit` (`id`),
  CONSTRAINT `userToUnit_user`
    FOREIGN KEY (`user_id` , `user_employeeClass_id`)
    REFERENCES `gameDB`.`user` (`id` , `employeeClass_id`))
COMMENT = 'This table stores records about possible employees roles in relation to the units (divisions, groups, etc.)(for example: Commander, Deputy Commander or Officer)';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
